/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

// NodeSpecApplyConfiguration represents a declarative configuration of the NodeSpec type for use
// with apply.
type NodeSpecApplyConfiguration struct {
	Name                      *string                               `json:"name,omitempty"`
	Disks                     map[string]DiskSpecApplyConfiguration `json:"disks,omitempty"`
	AllowScheduling           *bool                                 `json:"allowScheduling,omitempty"`
	EvictionRequested         *bool                                 `json:"evictionRequested,omitempty"`
	Tags                      []string                              `json:"tags,omitempty"`
	InstanceManagerCPURequest *int                                  `json:"instanceManagerCPURequest,omitempty"`
}

// NodeSpecApplyConfiguration constructs a declarative configuration of the NodeSpec type for use with
// apply.
func NodeSpec() *NodeSpecApplyConfiguration {
	return &NodeSpecApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *NodeSpecApplyConfiguration) WithName(value string) *NodeSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithDisks puts the entries into the Disks field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Disks field,
// overwriting an existing map entries in Disks field with the same key.
func (b *NodeSpecApplyConfiguration) WithDisks(entries map[string]DiskSpecApplyConfiguration) *NodeSpecApplyConfiguration {
	if b.Disks == nil && len(entries) > 0 {
		b.Disks = make(map[string]DiskSpecApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Disks[k] = v
	}
	return b
}

// WithAllowScheduling sets the AllowScheduling field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllowScheduling field is set to the value of the last call.
func (b *NodeSpecApplyConfiguration) WithAllowScheduling(value bool) *NodeSpecApplyConfiguration {
	b.AllowScheduling = &value
	return b
}

// WithEvictionRequested sets the EvictionRequested field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EvictionRequested field is set to the value of the last call.
func (b *NodeSpecApplyConfiguration) WithEvictionRequested(value bool) *NodeSpecApplyConfiguration {
	b.EvictionRequested = &value
	return b
}

// WithTags adds the given value to the Tags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tags field.
func (b *NodeSpecApplyConfiguration) WithTags(values ...string) *NodeSpecApplyConfiguration {
	for i := range values {
		b.Tags = append(b.Tags, values[i])
	}
	return b
}

// WithInstanceManagerCPURequest sets the InstanceManagerCPURequest field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InstanceManagerCPURequest field is set to the value of the last call.
func (b *NodeSpecApplyConfiguration) WithInstanceManagerCPURequest(value int) *NodeSpecApplyConfiguration {
	b.InstanceManagerCPURequest = &value
	return b
}
