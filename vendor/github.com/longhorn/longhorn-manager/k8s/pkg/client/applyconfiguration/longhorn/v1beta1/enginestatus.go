/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	longhornv1beta1 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta1"
)

// EngineStatusApplyConfiguration represents a declarative configuration of the EngineStatus type for use
// with apply.
type EngineStatusApplyConfiguration struct {
	CurrentSize              *int64                                          `json:"currentSize,omitempty"`
	CurrentReplicaAddressMap map[string]string                               `json:"currentReplicaAddressMap,omitempty"`
	ReplicaModeMap           map[string]longhornv1beta1.ReplicaMode          `json:"replicaModeMap,omitempty"`
	Endpoint                 *string                                         `json:"endpoint,omitempty"`
	LastRestoredBackup       *string                                         `json:"lastRestoredBackup,omitempty"`
	BackupStatus             map[string]*longhornv1beta1.EngineBackupStatus  `json:"backupStatus,omitempty"`
	RestoreStatus            map[string]*longhornv1beta1.RestoreStatus       `json:"restoreStatus,omitempty"`
	PurgeStatus              map[string]*longhornv1beta1.PurgeStatus         `json:"purgeStatus,omitempty"`
	RebuildStatus            map[string]*longhornv1beta1.RebuildStatus       `json:"rebuildStatus,omitempty"`
	CloneStatus              map[string]*longhornv1beta1.SnapshotCloneStatus `json:"cloneStatus,omitempty"`
	Snapshots                map[string]*longhornv1beta1.SnapshotInfo        `json:"snapshots,omitempty"`
	SnapshotsError           *string                                         `json:"snapshotsError,omitempty"`
	IsExpanding              *bool                                           `json:"isExpanding,omitempty"`
	LastExpansionError       *string                                         `json:"lastExpansionError,omitempty"`
	LastExpansionFailedAt    *string                                         `json:"lastExpansionFailedAt,omitempty"`
}

// EngineStatusApplyConfiguration constructs a declarative configuration of the EngineStatus type for use with
// apply.
func EngineStatus() *EngineStatusApplyConfiguration {
	return &EngineStatusApplyConfiguration{}
}

// WithCurrentSize sets the CurrentSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CurrentSize field is set to the value of the last call.
func (b *EngineStatusApplyConfiguration) WithCurrentSize(value int64) *EngineStatusApplyConfiguration {
	b.CurrentSize = &value
	return b
}

// WithCurrentReplicaAddressMap puts the entries into the CurrentReplicaAddressMap field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the CurrentReplicaAddressMap field,
// overwriting an existing map entries in CurrentReplicaAddressMap field with the same key.
func (b *EngineStatusApplyConfiguration) WithCurrentReplicaAddressMap(entries map[string]string) *EngineStatusApplyConfiguration {
	if b.CurrentReplicaAddressMap == nil && len(entries) > 0 {
		b.CurrentReplicaAddressMap = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.CurrentReplicaAddressMap[k] = v
	}
	return b
}

// WithReplicaModeMap puts the entries into the ReplicaModeMap field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ReplicaModeMap field,
// overwriting an existing map entries in ReplicaModeMap field with the same key.
func (b *EngineStatusApplyConfiguration) WithReplicaModeMap(entries map[string]longhornv1beta1.ReplicaMode) *EngineStatusApplyConfiguration {
	if b.ReplicaModeMap == nil && len(entries) > 0 {
		b.ReplicaModeMap = make(map[string]longhornv1beta1.ReplicaMode, len(entries))
	}
	for k, v := range entries {
		b.ReplicaModeMap[k] = v
	}
	return b
}

// WithEndpoint sets the Endpoint field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Endpoint field is set to the value of the last call.
func (b *EngineStatusApplyConfiguration) WithEndpoint(value string) *EngineStatusApplyConfiguration {
	b.Endpoint = &value
	return b
}

// WithLastRestoredBackup sets the LastRestoredBackup field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastRestoredBackup field is set to the value of the last call.
func (b *EngineStatusApplyConfiguration) WithLastRestoredBackup(value string) *EngineStatusApplyConfiguration {
	b.LastRestoredBackup = &value
	return b
}

// WithBackupStatus puts the entries into the BackupStatus field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the BackupStatus field,
// overwriting an existing map entries in BackupStatus field with the same key.
func (b *EngineStatusApplyConfiguration) WithBackupStatus(entries map[string]*longhornv1beta1.EngineBackupStatus) *EngineStatusApplyConfiguration {
	if b.BackupStatus == nil && len(entries) > 0 {
		b.BackupStatus = make(map[string]*longhornv1beta1.EngineBackupStatus, len(entries))
	}
	for k, v := range entries {
		b.BackupStatus[k] = v
	}
	return b
}

// WithRestoreStatus puts the entries into the RestoreStatus field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the RestoreStatus field,
// overwriting an existing map entries in RestoreStatus field with the same key.
func (b *EngineStatusApplyConfiguration) WithRestoreStatus(entries map[string]*longhornv1beta1.RestoreStatus) *EngineStatusApplyConfiguration {
	if b.RestoreStatus == nil && len(entries) > 0 {
		b.RestoreStatus = make(map[string]*longhornv1beta1.RestoreStatus, len(entries))
	}
	for k, v := range entries {
		b.RestoreStatus[k] = v
	}
	return b
}

// WithPurgeStatus puts the entries into the PurgeStatus field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the PurgeStatus field,
// overwriting an existing map entries in PurgeStatus field with the same key.
func (b *EngineStatusApplyConfiguration) WithPurgeStatus(entries map[string]*longhornv1beta1.PurgeStatus) *EngineStatusApplyConfiguration {
	if b.PurgeStatus == nil && len(entries) > 0 {
		b.PurgeStatus = make(map[string]*longhornv1beta1.PurgeStatus, len(entries))
	}
	for k, v := range entries {
		b.PurgeStatus[k] = v
	}
	return b
}

// WithRebuildStatus puts the entries into the RebuildStatus field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the RebuildStatus field,
// overwriting an existing map entries in RebuildStatus field with the same key.
func (b *EngineStatusApplyConfiguration) WithRebuildStatus(entries map[string]*longhornv1beta1.RebuildStatus) *EngineStatusApplyConfiguration {
	if b.RebuildStatus == nil && len(entries) > 0 {
		b.RebuildStatus = make(map[string]*longhornv1beta1.RebuildStatus, len(entries))
	}
	for k, v := range entries {
		b.RebuildStatus[k] = v
	}
	return b
}

// WithCloneStatus puts the entries into the CloneStatus field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the CloneStatus field,
// overwriting an existing map entries in CloneStatus field with the same key.
func (b *EngineStatusApplyConfiguration) WithCloneStatus(entries map[string]*longhornv1beta1.SnapshotCloneStatus) *EngineStatusApplyConfiguration {
	if b.CloneStatus == nil && len(entries) > 0 {
		b.CloneStatus = make(map[string]*longhornv1beta1.SnapshotCloneStatus, len(entries))
	}
	for k, v := range entries {
		b.CloneStatus[k] = v
	}
	return b
}

// WithSnapshots puts the entries into the Snapshots field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Snapshots field,
// overwriting an existing map entries in Snapshots field with the same key.
func (b *EngineStatusApplyConfiguration) WithSnapshots(entries map[string]*longhornv1beta1.SnapshotInfo) *EngineStatusApplyConfiguration {
	if b.Snapshots == nil && len(entries) > 0 {
		b.Snapshots = make(map[string]*longhornv1beta1.SnapshotInfo, len(entries))
	}
	for k, v := range entries {
		b.Snapshots[k] = v
	}
	return b
}

// WithSnapshotsError sets the SnapshotsError field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SnapshotsError field is set to the value of the last call.
func (b *EngineStatusApplyConfiguration) WithSnapshotsError(value string) *EngineStatusApplyConfiguration {
	b.SnapshotsError = &value
	return b
}

// WithIsExpanding sets the IsExpanding field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IsExpanding field is set to the value of the last call.
func (b *EngineStatusApplyConfiguration) WithIsExpanding(value bool) *EngineStatusApplyConfiguration {
	b.IsExpanding = &value
	return b
}

// WithLastExpansionError sets the LastExpansionError field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastExpansionError field is set to the value of the last call.
func (b *EngineStatusApplyConfiguration) WithLastExpansionError(value string) *EngineStatusApplyConfiguration {
	b.LastExpansionError = &value
	return b
}

// WithLastExpansionFailedAt sets the LastExpansionFailedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastExpansionFailedAt field is set to the value of the last call.
func (b *EngineStatusApplyConfiguration) WithLastExpansionFailedAt(value string) *EngineStatusApplyConfiguration {
	b.LastExpansionFailedAt = &value
	return b
}
