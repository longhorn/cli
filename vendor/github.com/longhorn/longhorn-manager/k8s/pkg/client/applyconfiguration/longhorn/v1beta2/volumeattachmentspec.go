/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

import (
	longhornv1beta2 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta2"
)

// VolumeAttachmentSpecApplyConfiguration represents a declarative configuration of the VolumeAttachmentSpec type for use
// with apply.
type VolumeAttachmentSpecApplyConfiguration struct {
	AttachmentTickets map[string]*longhornv1beta2.AttachmentTicket `json:"attachmentTickets,omitempty"`
	Volume            *string                                      `json:"volume,omitempty"`
}

// VolumeAttachmentSpecApplyConfiguration constructs a declarative configuration of the VolumeAttachmentSpec type for use with
// apply.
func VolumeAttachmentSpec() *VolumeAttachmentSpecApplyConfiguration {
	return &VolumeAttachmentSpecApplyConfiguration{}
}

// WithAttachmentTickets puts the entries into the AttachmentTickets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the AttachmentTickets field,
// overwriting an existing map entries in AttachmentTickets field with the same key.
func (b *VolumeAttachmentSpecApplyConfiguration) WithAttachmentTickets(entries map[string]*longhornv1beta2.AttachmentTicket) *VolumeAttachmentSpecApplyConfiguration {
	if b.AttachmentTickets == nil && len(entries) > 0 {
		b.AttachmentTickets = make(map[string]*longhornv1beta2.AttachmentTicket, len(entries))
	}
	for k, v := range entries {
		b.AttachmentTickets[k] = v
	}
	return b
}

// WithVolume sets the Volume field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Volume field is set to the value of the last call.
func (b *VolumeAttachmentSpecApplyConfiguration) WithVolume(value string) *VolumeAttachmentSpecApplyConfiguration {
	b.Volume = &value
	return b
}
