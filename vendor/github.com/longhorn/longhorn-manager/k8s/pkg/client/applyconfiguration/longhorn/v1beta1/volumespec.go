/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	longhornv1beta1 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta1"
)

// VolumeSpecApplyConfiguration represents a declarative configuration of the VolumeSpec type for use
// with apply.
type VolumeSpecApplyConfiguration struct {
	Size                    *int64                                     `json:"size,omitempty"`
	Frontend                *longhornv1beta1.VolumeFrontend            `json:"frontend,omitempty"`
	FromBackup              *string                                    `json:"fromBackup,omitempty"`
	DataSource              *longhornv1beta1.VolumeDataSource          `json:"dataSource,omitempty"`
	DataLocality            *longhornv1beta1.DataLocality              `json:"dataLocality,omitempty"`
	StaleReplicaTimeout     *int                                       `json:"staleReplicaTimeout,omitempty"`
	NodeID                  *string                                    `json:"nodeID,omitempty"`
	MigrationNodeID         *string                                    `json:"migrationNodeID,omitempty"`
	EngineImage             *string                                    `json:"engineImage,omitempty"`
	BackingImage            *string                                    `json:"backingImage,omitempty"`
	Standby                 *bool                                      `json:"Standby,omitempty"`
	DiskSelector            []string                                   `json:"diskSelector,omitempty"`
	NodeSelector            []string                                   `json:"nodeSelector,omitempty"`
	DisableFrontend         *bool                                      `json:"disableFrontend,omitempty"`
	RevisionCounterDisabled *bool                                      `json:"revisionCounterDisabled,omitempty"`
	LastAttachedBy          *string                                    `json:"lastAttachedBy,omitempty"`
	AccessMode              *longhornv1beta1.AccessMode                `json:"accessMode,omitempty"`
	Migratable              *bool                                      `json:"migratable,omitempty"`
	Encrypted               *bool                                      `json:"encrypted,omitempty"`
	NumberOfReplicas        *int                                       `json:"numberOfReplicas,omitempty"`
	ReplicaAutoBalance      *longhornv1beta1.ReplicaAutoBalance        `json:"replicaAutoBalance,omitempty"`
	BaseImage               *string                                    `json:"baseImage,omitempty"`
	RecurringJobs           []VolumeRecurringJobSpecApplyConfiguration `json:"recurringJobs,omitempty"`
}

// VolumeSpecApplyConfiguration constructs a declarative configuration of the VolumeSpec type for use with
// apply.
func VolumeSpec() *VolumeSpecApplyConfiguration {
	return &VolumeSpecApplyConfiguration{}
}

// WithSize sets the Size field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Size field is set to the value of the last call.
func (b *VolumeSpecApplyConfiguration) WithSize(value int64) *VolumeSpecApplyConfiguration {
	b.Size = &value
	return b
}

// WithFrontend sets the Frontend field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Frontend field is set to the value of the last call.
func (b *VolumeSpecApplyConfiguration) WithFrontend(value longhornv1beta1.VolumeFrontend) *VolumeSpecApplyConfiguration {
	b.Frontend = &value
	return b
}

// WithFromBackup sets the FromBackup field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FromBackup field is set to the value of the last call.
func (b *VolumeSpecApplyConfiguration) WithFromBackup(value string) *VolumeSpecApplyConfiguration {
	b.FromBackup = &value
	return b
}

// WithDataSource sets the DataSource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DataSource field is set to the value of the last call.
func (b *VolumeSpecApplyConfiguration) WithDataSource(value longhornv1beta1.VolumeDataSource) *VolumeSpecApplyConfiguration {
	b.DataSource = &value
	return b
}

// WithDataLocality sets the DataLocality field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DataLocality field is set to the value of the last call.
func (b *VolumeSpecApplyConfiguration) WithDataLocality(value longhornv1beta1.DataLocality) *VolumeSpecApplyConfiguration {
	b.DataLocality = &value
	return b
}

// WithStaleReplicaTimeout sets the StaleReplicaTimeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StaleReplicaTimeout field is set to the value of the last call.
func (b *VolumeSpecApplyConfiguration) WithStaleReplicaTimeout(value int) *VolumeSpecApplyConfiguration {
	b.StaleReplicaTimeout = &value
	return b
}

// WithNodeID sets the NodeID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeID field is set to the value of the last call.
func (b *VolumeSpecApplyConfiguration) WithNodeID(value string) *VolumeSpecApplyConfiguration {
	b.NodeID = &value
	return b
}

// WithMigrationNodeID sets the MigrationNodeID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MigrationNodeID field is set to the value of the last call.
func (b *VolumeSpecApplyConfiguration) WithMigrationNodeID(value string) *VolumeSpecApplyConfiguration {
	b.MigrationNodeID = &value
	return b
}

// WithEngineImage sets the EngineImage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EngineImage field is set to the value of the last call.
func (b *VolumeSpecApplyConfiguration) WithEngineImage(value string) *VolumeSpecApplyConfiguration {
	b.EngineImage = &value
	return b
}

// WithBackingImage sets the BackingImage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackingImage field is set to the value of the last call.
func (b *VolumeSpecApplyConfiguration) WithBackingImage(value string) *VolumeSpecApplyConfiguration {
	b.BackingImage = &value
	return b
}

// WithStandby sets the Standby field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Standby field is set to the value of the last call.
func (b *VolumeSpecApplyConfiguration) WithStandby(value bool) *VolumeSpecApplyConfiguration {
	b.Standby = &value
	return b
}

// WithDiskSelector adds the given value to the DiskSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DiskSelector field.
func (b *VolumeSpecApplyConfiguration) WithDiskSelector(values ...string) *VolumeSpecApplyConfiguration {
	for i := range values {
		b.DiskSelector = append(b.DiskSelector, values[i])
	}
	return b
}

// WithNodeSelector adds the given value to the NodeSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NodeSelector field.
func (b *VolumeSpecApplyConfiguration) WithNodeSelector(values ...string) *VolumeSpecApplyConfiguration {
	for i := range values {
		b.NodeSelector = append(b.NodeSelector, values[i])
	}
	return b
}

// WithDisableFrontend sets the DisableFrontend field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DisableFrontend field is set to the value of the last call.
func (b *VolumeSpecApplyConfiguration) WithDisableFrontend(value bool) *VolumeSpecApplyConfiguration {
	b.DisableFrontend = &value
	return b
}

// WithRevisionCounterDisabled sets the RevisionCounterDisabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RevisionCounterDisabled field is set to the value of the last call.
func (b *VolumeSpecApplyConfiguration) WithRevisionCounterDisabled(value bool) *VolumeSpecApplyConfiguration {
	b.RevisionCounterDisabled = &value
	return b
}

// WithLastAttachedBy sets the LastAttachedBy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastAttachedBy field is set to the value of the last call.
func (b *VolumeSpecApplyConfiguration) WithLastAttachedBy(value string) *VolumeSpecApplyConfiguration {
	b.LastAttachedBy = &value
	return b
}

// WithAccessMode sets the AccessMode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AccessMode field is set to the value of the last call.
func (b *VolumeSpecApplyConfiguration) WithAccessMode(value longhornv1beta1.AccessMode) *VolumeSpecApplyConfiguration {
	b.AccessMode = &value
	return b
}

// WithMigratable sets the Migratable field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Migratable field is set to the value of the last call.
func (b *VolumeSpecApplyConfiguration) WithMigratable(value bool) *VolumeSpecApplyConfiguration {
	b.Migratable = &value
	return b
}

// WithEncrypted sets the Encrypted field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Encrypted field is set to the value of the last call.
func (b *VolumeSpecApplyConfiguration) WithEncrypted(value bool) *VolumeSpecApplyConfiguration {
	b.Encrypted = &value
	return b
}

// WithNumberOfReplicas sets the NumberOfReplicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NumberOfReplicas field is set to the value of the last call.
func (b *VolumeSpecApplyConfiguration) WithNumberOfReplicas(value int) *VolumeSpecApplyConfiguration {
	b.NumberOfReplicas = &value
	return b
}

// WithReplicaAutoBalance sets the ReplicaAutoBalance field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReplicaAutoBalance field is set to the value of the last call.
func (b *VolumeSpecApplyConfiguration) WithReplicaAutoBalance(value longhornv1beta1.ReplicaAutoBalance) *VolumeSpecApplyConfiguration {
	b.ReplicaAutoBalance = &value
	return b
}

// WithBaseImage sets the BaseImage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BaseImage field is set to the value of the last call.
func (b *VolumeSpecApplyConfiguration) WithBaseImage(value string) *VolumeSpecApplyConfiguration {
	b.BaseImage = &value
	return b
}

// WithRecurringJobs adds the given value to the RecurringJobs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the RecurringJobs field.
func (b *VolumeSpecApplyConfiguration) WithRecurringJobs(values ...*VolumeRecurringJobSpecApplyConfiguration) *VolumeSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRecurringJobs")
		}
		b.RecurringJobs = append(b.RecurringJobs, *values[i])
	}
	return b
}
