/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// BackingImageManagerSpecApplyConfiguration represents a declarative configuration of the BackingImageManagerSpec type for use
// with apply.
type BackingImageManagerSpecApplyConfiguration struct {
	Image         *string           `json:"image,omitempty"`
	NodeID        *string           `json:"nodeID,omitempty"`
	DiskUUID      *string           `json:"diskUUID,omitempty"`
	DiskPath      *string           `json:"diskPath,omitempty"`
	BackingImages map[string]string `json:"backingImages,omitempty"`
}

// BackingImageManagerSpecApplyConfiguration constructs a declarative configuration of the BackingImageManagerSpec type for use with
// apply.
func BackingImageManagerSpec() *BackingImageManagerSpecApplyConfiguration {
	return &BackingImageManagerSpecApplyConfiguration{}
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *BackingImageManagerSpecApplyConfiguration) WithImage(value string) *BackingImageManagerSpecApplyConfiguration {
	b.Image = &value
	return b
}

// WithNodeID sets the NodeID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeID field is set to the value of the last call.
func (b *BackingImageManagerSpecApplyConfiguration) WithNodeID(value string) *BackingImageManagerSpecApplyConfiguration {
	b.NodeID = &value
	return b
}

// WithDiskUUID sets the DiskUUID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DiskUUID field is set to the value of the last call.
func (b *BackingImageManagerSpecApplyConfiguration) WithDiskUUID(value string) *BackingImageManagerSpecApplyConfiguration {
	b.DiskUUID = &value
	return b
}

// WithDiskPath sets the DiskPath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DiskPath field is set to the value of the last call.
func (b *BackingImageManagerSpecApplyConfiguration) WithDiskPath(value string) *BackingImageManagerSpecApplyConfiguration {
	b.DiskPath = &value
	return b
}

// WithBackingImages puts the entries into the BackingImages field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the BackingImages field,
// overwriting an existing map entries in BackingImages field with the same key.
func (b *BackingImageManagerSpecApplyConfiguration) WithBackingImages(entries map[string]string) *BackingImageManagerSpecApplyConfiguration {
	if b.BackingImages == nil && len(entries) > 0 {
		b.BackingImages = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.BackingImages[k] = v
	}
	return b
}
