/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// BackupTargetStatusApplyConfiguration represents a declarative configuration of the BackupTargetStatus type for use
// with apply.
type BackupTargetStatusApplyConfiguration struct {
	OwnerID      *string                                `json:"ownerID,omitempty"`
	Available    *bool                                  `json:"available,omitempty"`
	Conditions   map[string]ConditionApplyConfiguration `json:"conditions,omitempty"`
	LastSyncedAt *v1.Time                               `json:"lastSyncedAt,omitempty"`
}

// BackupTargetStatusApplyConfiguration constructs a declarative configuration of the BackupTargetStatus type for use with
// apply.
func BackupTargetStatus() *BackupTargetStatusApplyConfiguration {
	return &BackupTargetStatusApplyConfiguration{}
}

// WithOwnerID sets the OwnerID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OwnerID field is set to the value of the last call.
func (b *BackupTargetStatusApplyConfiguration) WithOwnerID(value string) *BackupTargetStatusApplyConfiguration {
	b.OwnerID = &value
	return b
}

// WithAvailable sets the Available field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Available field is set to the value of the last call.
func (b *BackupTargetStatusApplyConfiguration) WithAvailable(value bool) *BackupTargetStatusApplyConfiguration {
	b.Available = &value
	return b
}

// WithConditions puts the entries into the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Conditions field,
// overwriting an existing map entries in Conditions field with the same key.
func (b *BackupTargetStatusApplyConfiguration) WithConditions(entries map[string]ConditionApplyConfiguration) *BackupTargetStatusApplyConfiguration {
	if b.Conditions == nil && len(entries) > 0 {
		b.Conditions = make(map[string]ConditionApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Conditions[k] = v
	}
	return b
}

// WithLastSyncedAt sets the LastSyncedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastSyncedAt field is set to the value of the last call.
func (b *BackupTargetStatusApplyConfiguration) WithLastSyncedAt(value v1.Time) *BackupTargetStatusApplyConfiguration {
	b.LastSyncedAt = &value
	return b
}
