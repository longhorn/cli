/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// ReplicaSpecApplyConfiguration represents a declarative configuration of the ReplicaSpec type for use
// with apply.
type ReplicaSpecApplyConfiguration struct {
	EngineName              *string `json:"engineName,omitempty"`
	HealthyAt               *string `json:"healthyAt,omitempty"`
	FailedAt                *string `json:"failedAt,omitempty"`
	DiskID                  *string `json:"diskID,omitempty"`
	DiskPath                *string `json:"diskPath,omitempty"`
	DataDirectoryName       *string `json:"dataDirectoryName,omitempty"`
	BackingImage            *string `json:"backingImage,omitempty"`
	Active                  *bool   `json:"active,omitempty"`
	HardNodeAffinity        *string `json:"hardNodeAffinity,omitempty"`
	RevisionCounterDisabled *bool   `json:"revisionCounterDisabled,omitempty"`
	RebuildRetryCount       *int    `json:"rebuildRetryCount,omitempty"`
	DataPath                *string `json:"dataPath,omitempty"`
	BaseImage               *string `json:"baseImage,omitempty"`
}

// ReplicaSpecApplyConfiguration constructs a declarative configuration of the ReplicaSpec type for use with
// apply.
func ReplicaSpec() *ReplicaSpecApplyConfiguration {
	return &ReplicaSpecApplyConfiguration{}
}

// WithEngineName sets the EngineName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EngineName field is set to the value of the last call.
func (b *ReplicaSpecApplyConfiguration) WithEngineName(value string) *ReplicaSpecApplyConfiguration {
	b.EngineName = &value
	return b
}

// WithHealthyAt sets the HealthyAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HealthyAt field is set to the value of the last call.
func (b *ReplicaSpecApplyConfiguration) WithHealthyAt(value string) *ReplicaSpecApplyConfiguration {
	b.HealthyAt = &value
	return b
}

// WithFailedAt sets the FailedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FailedAt field is set to the value of the last call.
func (b *ReplicaSpecApplyConfiguration) WithFailedAt(value string) *ReplicaSpecApplyConfiguration {
	b.FailedAt = &value
	return b
}

// WithDiskID sets the DiskID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DiskID field is set to the value of the last call.
func (b *ReplicaSpecApplyConfiguration) WithDiskID(value string) *ReplicaSpecApplyConfiguration {
	b.DiskID = &value
	return b
}

// WithDiskPath sets the DiskPath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DiskPath field is set to the value of the last call.
func (b *ReplicaSpecApplyConfiguration) WithDiskPath(value string) *ReplicaSpecApplyConfiguration {
	b.DiskPath = &value
	return b
}

// WithDataDirectoryName sets the DataDirectoryName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DataDirectoryName field is set to the value of the last call.
func (b *ReplicaSpecApplyConfiguration) WithDataDirectoryName(value string) *ReplicaSpecApplyConfiguration {
	b.DataDirectoryName = &value
	return b
}

// WithBackingImage sets the BackingImage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackingImage field is set to the value of the last call.
func (b *ReplicaSpecApplyConfiguration) WithBackingImage(value string) *ReplicaSpecApplyConfiguration {
	b.BackingImage = &value
	return b
}

// WithActive sets the Active field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Active field is set to the value of the last call.
func (b *ReplicaSpecApplyConfiguration) WithActive(value bool) *ReplicaSpecApplyConfiguration {
	b.Active = &value
	return b
}

// WithHardNodeAffinity sets the HardNodeAffinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HardNodeAffinity field is set to the value of the last call.
func (b *ReplicaSpecApplyConfiguration) WithHardNodeAffinity(value string) *ReplicaSpecApplyConfiguration {
	b.HardNodeAffinity = &value
	return b
}

// WithRevisionCounterDisabled sets the RevisionCounterDisabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RevisionCounterDisabled field is set to the value of the last call.
func (b *ReplicaSpecApplyConfiguration) WithRevisionCounterDisabled(value bool) *ReplicaSpecApplyConfiguration {
	b.RevisionCounterDisabled = &value
	return b
}

// WithRebuildRetryCount sets the RebuildRetryCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RebuildRetryCount field is set to the value of the last call.
func (b *ReplicaSpecApplyConfiguration) WithRebuildRetryCount(value int) *ReplicaSpecApplyConfiguration {
	b.RebuildRetryCount = &value
	return b
}

// WithDataPath sets the DataPath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DataPath field is set to the value of the last call.
func (b *ReplicaSpecApplyConfiguration) WithDataPath(value string) *ReplicaSpecApplyConfiguration {
	b.DataPath = &value
	return b
}

// WithBaseImage sets the BaseImage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BaseImage field is set to the value of the last call.
func (b *ReplicaSpecApplyConfiguration) WithBaseImage(value string) *ReplicaSpecApplyConfiguration {
	b.BaseImage = &value
	return b
}
