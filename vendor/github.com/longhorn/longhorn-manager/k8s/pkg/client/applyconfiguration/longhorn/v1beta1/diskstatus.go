/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// DiskStatusApplyConfiguration represents a declarative configuration of the DiskStatus type for use
// with apply.
type DiskStatusApplyConfiguration struct {
	Conditions       map[string]ConditionApplyConfiguration `json:"conditions,omitempty"`
	StorageAvailable *int64                                 `json:"storageAvailable,omitempty"`
	StorageScheduled *int64                                 `json:"storageScheduled,omitempty"`
	StorageMaximum   *int64                                 `json:"storageMaximum,omitempty"`
	ScheduledReplica map[string]int64                       `json:"scheduledReplica,omitempty"`
	DiskUUID         *string                                `json:"diskUUID,omitempty"`
}

// DiskStatusApplyConfiguration constructs a declarative configuration of the DiskStatus type for use with
// apply.
func DiskStatus() *DiskStatusApplyConfiguration {
	return &DiskStatusApplyConfiguration{}
}

// WithConditions puts the entries into the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Conditions field,
// overwriting an existing map entries in Conditions field with the same key.
func (b *DiskStatusApplyConfiguration) WithConditions(entries map[string]ConditionApplyConfiguration) *DiskStatusApplyConfiguration {
	if b.Conditions == nil && len(entries) > 0 {
		b.Conditions = make(map[string]ConditionApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Conditions[k] = v
	}
	return b
}

// WithStorageAvailable sets the StorageAvailable field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StorageAvailable field is set to the value of the last call.
func (b *DiskStatusApplyConfiguration) WithStorageAvailable(value int64) *DiskStatusApplyConfiguration {
	b.StorageAvailable = &value
	return b
}

// WithStorageScheduled sets the StorageScheduled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StorageScheduled field is set to the value of the last call.
func (b *DiskStatusApplyConfiguration) WithStorageScheduled(value int64) *DiskStatusApplyConfiguration {
	b.StorageScheduled = &value
	return b
}

// WithStorageMaximum sets the StorageMaximum field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StorageMaximum field is set to the value of the last call.
func (b *DiskStatusApplyConfiguration) WithStorageMaximum(value int64) *DiskStatusApplyConfiguration {
	b.StorageMaximum = &value
	return b
}

// WithScheduledReplica puts the entries into the ScheduledReplica field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ScheduledReplica field,
// overwriting an existing map entries in ScheduledReplica field with the same key.
func (b *DiskStatusApplyConfiguration) WithScheduledReplica(entries map[string]int64) *DiskStatusApplyConfiguration {
	if b.ScheduledReplica == nil && len(entries) > 0 {
		b.ScheduledReplica = make(map[string]int64, len(entries))
	}
	for k, v := range entries {
		b.ScheduledReplica[k] = v
	}
	return b
}

// WithDiskUUID sets the DiskUUID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DiskUUID field is set to the value of the last call.
func (b *DiskStatusApplyConfiguration) WithDiskUUID(value string) *DiskStatusApplyConfiguration {
	b.DiskUUID = &value
	return b
}
