/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

import (
	longhornv1beta2 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta2"
)

// DiskSpecApplyConfiguration represents a declarative configuration of the DiskSpec type for use
// with apply.
type DiskSpecApplyConfiguration struct {
	Type              *longhornv1beta2.DiskType   `json:"diskType,omitempty"`
	Path              *string                     `json:"path,omitempty"`
	DiskDriver        *longhornv1beta2.DiskDriver `json:"diskDriver,omitempty"`
	AllowScheduling   *bool                       `json:"allowScheduling,omitempty"`
	EvictionRequested *bool                       `json:"evictionRequested,omitempty"`
	StorageReserved   *int64                      `json:"storageReserved,omitempty"`
	Tags              []string                    `json:"tags,omitempty"`
}

// DiskSpecApplyConfiguration constructs a declarative configuration of the DiskSpec type for use with
// apply.
func DiskSpec() *DiskSpecApplyConfiguration {
	return &DiskSpecApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *DiskSpecApplyConfiguration) WithType(value longhornv1beta2.DiskType) *DiskSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithPath sets the Path field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Path field is set to the value of the last call.
func (b *DiskSpecApplyConfiguration) WithPath(value string) *DiskSpecApplyConfiguration {
	b.Path = &value
	return b
}

// WithDiskDriver sets the DiskDriver field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DiskDriver field is set to the value of the last call.
func (b *DiskSpecApplyConfiguration) WithDiskDriver(value longhornv1beta2.DiskDriver) *DiskSpecApplyConfiguration {
	b.DiskDriver = &value
	return b
}

// WithAllowScheduling sets the AllowScheduling field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllowScheduling field is set to the value of the last call.
func (b *DiskSpecApplyConfiguration) WithAllowScheduling(value bool) *DiskSpecApplyConfiguration {
	b.AllowScheduling = &value
	return b
}

// WithEvictionRequested sets the EvictionRequested field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EvictionRequested field is set to the value of the last call.
func (b *DiskSpecApplyConfiguration) WithEvictionRequested(value bool) *DiskSpecApplyConfiguration {
	b.EvictionRequested = &value
	return b
}

// WithStorageReserved sets the StorageReserved field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StorageReserved field is set to the value of the last call.
func (b *DiskSpecApplyConfiguration) WithStorageReserved(value int64) *DiskSpecApplyConfiguration {
	b.StorageReserved = &value
	return b
}

// WithTags adds the given value to the Tags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tags field.
func (b *DiskSpecApplyConfiguration) WithTags(values ...string) *DiskSpecApplyConfiguration {
	for i := range values {
		b.Tags = append(b.Tags, values[i])
	}
	return b
}
