/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

import (
	longhornv1beta2 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta2"
)

// SupportBundleStatusApplyConfiguration represents a declarative configuration of the SupportBundleStatus type for use
// with apply.
type SupportBundleStatusApplyConfiguration struct {
	OwnerID    *string                             `json:"ownerID,omitempty"`
	Image      *string                             `json:"image,omitempty"`
	IP         *string                             `json:"managerIP,omitempty"`
	State      *longhornv1beta2.SupportBundleState `json:"state,omitempty"`
	Progress   *int                                `json:"progress,omitempty"`
	Filename   *string                             `json:"filename,omitempty"`
	Filesize   *int64                              `json:"filesize,omitempty"`
	Conditions []ConditionApplyConfiguration       `json:"conditions,omitempty"`
}

// SupportBundleStatusApplyConfiguration constructs a declarative configuration of the SupportBundleStatus type for use with
// apply.
func SupportBundleStatus() *SupportBundleStatusApplyConfiguration {
	return &SupportBundleStatusApplyConfiguration{}
}

// WithOwnerID sets the OwnerID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OwnerID field is set to the value of the last call.
func (b *SupportBundleStatusApplyConfiguration) WithOwnerID(value string) *SupportBundleStatusApplyConfiguration {
	b.OwnerID = &value
	return b
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *SupportBundleStatusApplyConfiguration) WithImage(value string) *SupportBundleStatusApplyConfiguration {
	b.Image = &value
	return b
}

// WithIP sets the IP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IP field is set to the value of the last call.
func (b *SupportBundleStatusApplyConfiguration) WithIP(value string) *SupportBundleStatusApplyConfiguration {
	b.IP = &value
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *SupportBundleStatusApplyConfiguration) WithState(value longhornv1beta2.SupportBundleState) *SupportBundleStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithProgress sets the Progress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Progress field is set to the value of the last call.
func (b *SupportBundleStatusApplyConfiguration) WithProgress(value int) *SupportBundleStatusApplyConfiguration {
	b.Progress = &value
	return b
}

// WithFilename sets the Filename field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Filename field is set to the value of the last call.
func (b *SupportBundleStatusApplyConfiguration) WithFilename(value string) *SupportBundleStatusApplyConfiguration {
	b.Filename = &value
	return b
}

// WithFilesize sets the Filesize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Filesize field is set to the value of the last call.
func (b *SupportBundleStatusApplyConfiguration) WithFilesize(value int64) *SupportBundleStatusApplyConfiguration {
	b.Filesize = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *SupportBundleStatusApplyConfiguration) WithConditions(values ...*ConditionApplyConfiguration) *SupportBundleStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
