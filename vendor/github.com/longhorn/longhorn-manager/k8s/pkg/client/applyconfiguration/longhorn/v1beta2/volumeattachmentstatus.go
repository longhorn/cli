/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

import (
	longhornv1beta2 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta2"
)

// VolumeAttachmentStatusApplyConfiguration represents a declarative configuration of the VolumeAttachmentStatus type for use
// with apply.
type VolumeAttachmentStatusApplyConfiguration struct {
	AttachmentTicketStatuses map[string]*longhornv1beta2.AttachmentTicketStatus `json:"attachmentTicketStatuses,omitempty"`
}

// VolumeAttachmentStatusApplyConfiguration constructs a declarative configuration of the VolumeAttachmentStatus type for use with
// apply.
func VolumeAttachmentStatus() *VolumeAttachmentStatusApplyConfiguration {
	return &VolumeAttachmentStatusApplyConfiguration{}
}

// WithAttachmentTicketStatuses puts the entries into the AttachmentTicketStatuses field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the AttachmentTicketStatuses field,
// overwriting an existing map entries in AttachmentTicketStatuses field with the same key.
func (b *VolumeAttachmentStatusApplyConfiguration) WithAttachmentTicketStatuses(entries map[string]*longhornv1beta2.AttachmentTicketStatus) *VolumeAttachmentStatusApplyConfiguration {
	if b.AttachmentTicketStatuses == nil && len(entries) > 0 {
		b.AttachmentTicketStatuses = make(map[string]*longhornv1beta2.AttachmentTicketStatus, len(entries))
	}
	for k, v := range entries {
		b.AttachmentTicketStatuses[k] = v
	}
	return b
}
