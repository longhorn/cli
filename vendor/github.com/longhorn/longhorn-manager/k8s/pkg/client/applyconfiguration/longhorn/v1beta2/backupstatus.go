/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

import (
	longhornv1beta2 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// BackupStatusApplyConfiguration represents a declarative configuration of the BackupStatus type for use
// with apply.
type BackupStatusApplyConfiguration struct {
	OwnerID                *string                                  `json:"ownerID,omitempty"`
	State                  *longhornv1beta2.BackupState             `json:"state,omitempty"`
	Progress               *int                                     `json:"progress,omitempty"`
	ReplicaAddress         *string                                  `json:"replicaAddress,omitempty"`
	Error                  *string                                  `json:"error,omitempty"`
	URL                    *string                                  `json:"url,omitempty"`
	SnapshotName           *string                                  `json:"snapshotName,omitempty"`
	SnapshotCreatedAt      *string                                  `json:"snapshotCreatedAt,omitempty"`
	BackupCreatedAt        *string                                  `json:"backupCreatedAt,omitempty"`
	Size                   *string                                  `json:"size,omitempty"`
	Labels                 map[string]string                        `json:"labels,omitempty"`
	Messages               map[string]string                        `json:"messages,omitempty"`
	VolumeName             *string                                  `json:"volumeName,omitempty"`
	VolumeSize             *string                                  `json:"volumeSize,omitempty"`
	VolumeCreated          *string                                  `json:"volumeCreated,omitempty"`
	VolumeBackingImageName *string                                  `json:"volumeBackingImageName,omitempty"`
	LastSyncedAt           *v1.Time                                 `json:"lastSyncedAt,omitempty"`
	CompressionMethod      *longhornv1beta2.BackupCompressionMethod `json:"compressionMethod,omitempty"`
	NewlyUploadedDataSize  *string                                  `json:"newlyUploadDataSize,omitempty"`
	ReUploadedDataSize     *string                                  `json:"reUploadedDataSize,omitempty"`
	BackupTargetName       *string                                  `json:"backupTargetName,omitempty"`
}

// BackupStatusApplyConfiguration constructs a declarative configuration of the BackupStatus type for use with
// apply.
func BackupStatus() *BackupStatusApplyConfiguration {
	return &BackupStatusApplyConfiguration{}
}

// WithOwnerID sets the OwnerID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OwnerID field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithOwnerID(value string) *BackupStatusApplyConfiguration {
	b.OwnerID = &value
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithState(value longhornv1beta2.BackupState) *BackupStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithProgress sets the Progress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Progress field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithProgress(value int) *BackupStatusApplyConfiguration {
	b.Progress = &value
	return b
}

// WithReplicaAddress sets the ReplicaAddress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReplicaAddress field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithReplicaAddress(value string) *BackupStatusApplyConfiguration {
	b.ReplicaAddress = &value
	return b
}

// WithError sets the Error field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Error field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithError(value string) *BackupStatusApplyConfiguration {
	b.Error = &value
	return b
}

// WithURL sets the URL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the URL field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithURL(value string) *BackupStatusApplyConfiguration {
	b.URL = &value
	return b
}

// WithSnapshotName sets the SnapshotName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SnapshotName field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithSnapshotName(value string) *BackupStatusApplyConfiguration {
	b.SnapshotName = &value
	return b
}

// WithSnapshotCreatedAt sets the SnapshotCreatedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SnapshotCreatedAt field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithSnapshotCreatedAt(value string) *BackupStatusApplyConfiguration {
	b.SnapshotCreatedAt = &value
	return b
}

// WithBackupCreatedAt sets the BackupCreatedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackupCreatedAt field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithBackupCreatedAt(value string) *BackupStatusApplyConfiguration {
	b.BackupCreatedAt = &value
	return b
}

// WithSize sets the Size field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Size field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithSize(value string) *BackupStatusApplyConfiguration {
	b.Size = &value
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *BackupStatusApplyConfiguration) WithLabels(entries map[string]string) *BackupStatusApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithMessages puts the entries into the Messages field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Messages field,
// overwriting an existing map entries in Messages field with the same key.
func (b *BackupStatusApplyConfiguration) WithMessages(entries map[string]string) *BackupStatusApplyConfiguration {
	if b.Messages == nil && len(entries) > 0 {
		b.Messages = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Messages[k] = v
	}
	return b
}

// WithVolumeName sets the VolumeName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumeName field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithVolumeName(value string) *BackupStatusApplyConfiguration {
	b.VolumeName = &value
	return b
}

// WithVolumeSize sets the VolumeSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumeSize field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithVolumeSize(value string) *BackupStatusApplyConfiguration {
	b.VolumeSize = &value
	return b
}

// WithVolumeCreated sets the VolumeCreated field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumeCreated field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithVolumeCreated(value string) *BackupStatusApplyConfiguration {
	b.VolumeCreated = &value
	return b
}

// WithVolumeBackingImageName sets the VolumeBackingImageName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumeBackingImageName field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithVolumeBackingImageName(value string) *BackupStatusApplyConfiguration {
	b.VolumeBackingImageName = &value
	return b
}

// WithLastSyncedAt sets the LastSyncedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastSyncedAt field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithLastSyncedAt(value v1.Time) *BackupStatusApplyConfiguration {
	b.LastSyncedAt = &value
	return b
}

// WithCompressionMethod sets the CompressionMethod field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CompressionMethod field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithCompressionMethod(value longhornv1beta2.BackupCompressionMethod) *BackupStatusApplyConfiguration {
	b.CompressionMethod = &value
	return b
}

// WithNewlyUploadedDataSize sets the NewlyUploadedDataSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NewlyUploadedDataSize field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithNewlyUploadedDataSize(value string) *BackupStatusApplyConfiguration {
	b.NewlyUploadedDataSize = &value
	return b
}

// WithReUploadedDataSize sets the ReUploadedDataSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReUploadedDataSize field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithReUploadedDataSize(value string) *BackupStatusApplyConfiguration {
	b.ReUploadedDataSize = &value
	return b
}

// WithBackupTargetName sets the BackupTargetName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackupTargetName field is set to the value of the last call.
func (b *BackupStatusApplyConfiguration) WithBackupTargetName(value string) *BackupStatusApplyConfiguration {
	b.BackupTargetName = &value
	return b
}
