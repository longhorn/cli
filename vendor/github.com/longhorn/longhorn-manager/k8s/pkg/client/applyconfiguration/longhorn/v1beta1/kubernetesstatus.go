/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// KubernetesStatusApplyConfiguration represents a declarative configuration of the KubernetesStatus type for use
// with apply.
type KubernetesStatusApplyConfiguration struct {
	PVName          *string                            `json:"pvName,omitempty"`
	PVStatus        *string                            `json:"pvStatus,omitempty"`
	Namespace       *string                            `json:"namespace,omitempty"`
	PVCName         *string                            `json:"pvcName,omitempty"`
	LastPVCRefAt    *string                            `json:"lastPVCRefAt,omitempty"`
	WorkloadsStatus []WorkloadStatusApplyConfiguration `json:"workloadsStatus,omitempty"`
	LastPodRefAt    *string                            `json:"lastPodRefAt,omitempty"`
}

// KubernetesStatusApplyConfiguration constructs a declarative configuration of the KubernetesStatus type for use with
// apply.
func KubernetesStatus() *KubernetesStatusApplyConfiguration {
	return &KubernetesStatusApplyConfiguration{}
}

// WithPVName sets the PVName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PVName field is set to the value of the last call.
func (b *KubernetesStatusApplyConfiguration) WithPVName(value string) *KubernetesStatusApplyConfiguration {
	b.PVName = &value
	return b
}

// WithPVStatus sets the PVStatus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PVStatus field is set to the value of the last call.
func (b *KubernetesStatusApplyConfiguration) WithPVStatus(value string) *KubernetesStatusApplyConfiguration {
	b.PVStatus = &value
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *KubernetesStatusApplyConfiguration) WithNamespace(value string) *KubernetesStatusApplyConfiguration {
	b.Namespace = &value
	return b
}

// WithPVCName sets the PVCName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PVCName field is set to the value of the last call.
func (b *KubernetesStatusApplyConfiguration) WithPVCName(value string) *KubernetesStatusApplyConfiguration {
	b.PVCName = &value
	return b
}

// WithLastPVCRefAt sets the LastPVCRefAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastPVCRefAt field is set to the value of the last call.
func (b *KubernetesStatusApplyConfiguration) WithLastPVCRefAt(value string) *KubernetesStatusApplyConfiguration {
	b.LastPVCRefAt = &value
	return b
}

// WithWorkloadsStatus adds the given value to the WorkloadsStatus field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the WorkloadsStatus field.
func (b *KubernetesStatusApplyConfiguration) WithWorkloadsStatus(values ...*WorkloadStatusApplyConfiguration) *KubernetesStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithWorkloadsStatus")
		}
		b.WorkloadsStatus = append(b.WorkloadsStatus, *values[i])
	}
	return b
}

// WithLastPodRefAt sets the LastPodRefAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastPodRefAt field is set to the value of the last call.
func (b *KubernetesStatusApplyConfiguration) WithLastPodRefAt(value string) *KubernetesStatusApplyConfiguration {
	b.LastPodRefAt = &value
	return b
}
