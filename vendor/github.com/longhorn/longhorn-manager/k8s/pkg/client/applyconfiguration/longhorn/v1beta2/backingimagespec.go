/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

import (
	longhornv1beta2 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta2"
)

// BackingImageSpecApplyConfiguration represents a declarative configuration of the BackingImageSpec type for use
// with apply.
type BackingImageSpecApplyConfiguration struct {
	Disks             map[string]string                                    `json:"disks,omitempty"`
	DiskFileSpecMap   map[string]*longhornv1beta2.BackingImageDiskFileSpec `json:"diskFileSpecMap,omitempty"`
	Checksum          *string                                              `json:"checksum,omitempty"`
	SourceType        *longhornv1beta2.BackingImageDataSourceType          `json:"sourceType,omitempty"`
	SourceParameters  map[string]string                                    `json:"sourceParameters,omitempty"`
	MinNumberOfCopies *int                                                 `json:"minNumberOfCopies,omitempty"`
	DiskSelector      []string                                             `json:"diskSelector,omitempty"`
	NodeSelector      []string                                             `json:"nodeSelector,omitempty"`
	Secret            *string                                              `json:"secret,omitempty"`
	SecretNamespace   *string                                              `json:"secretNamespace,omitempty"`
	DataEngine        *longhornv1beta2.DataEngineType                      `json:"dataEngine,omitempty"`
}

// BackingImageSpecApplyConfiguration constructs a declarative configuration of the BackingImageSpec type for use with
// apply.
func BackingImageSpec() *BackingImageSpecApplyConfiguration {
	return &BackingImageSpecApplyConfiguration{}
}

// WithDisks puts the entries into the Disks field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Disks field,
// overwriting an existing map entries in Disks field with the same key.
func (b *BackingImageSpecApplyConfiguration) WithDisks(entries map[string]string) *BackingImageSpecApplyConfiguration {
	if b.Disks == nil && len(entries) > 0 {
		b.Disks = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Disks[k] = v
	}
	return b
}

// WithDiskFileSpecMap puts the entries into the DiskFileSpecMap field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the DiskFileSpecMap field,
// overwriting an existing map entries in DiskFileSpecMap field with the same key.
func (b *BackingImageSpecApplyConfiguration) WithDiskFileSpecMap(entries map[string]*longhornv1beta2.BackingImageDiskFileSpec) *BackingImageSpecApplyConfiguration {
	if b.DiskFileSpecMap == nil && len(entries) > 0 {
		b.DiskFileSpecMap = make(map[string]*longhornv1beta2.BackingImageDiskFileSpec, len(entries))
	}
	for k, v := range entries {
		b.DiskFileSpecMap[k] = v
	}
	return b
}

// WithChecksum sets the Checksum field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Checksum field is set to the value of the last call.
func (b *BackingImageSpecApplyConfiguration) WithChecksum(value string) *BackingImageSpecApplyConfiguration {
	b.Checksum = &value
	return b
}

// WithSourceType sets the SourceType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SourceType field is set to the value of the last call.
func (b *BackingImageSpecApplyConfiguration) WithSourceType(value longhornv1beta2.BackingImageDataSourceType) *BackingImageSpecApplyConfiguration {
	b.SourceType = &value
	return b
}

// WithSourceParameters puts the entries into the SourceParameters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the SourceParameters field,
// overwriting an existing map entries in SourceParameters field with the same key.
func (b *BackingImageSpecApplyConfiguration) WithSourceParameters(entries map[string]string) *BackingImageSpecApplyConfiguration {
	if b.SourceParameters == nil && len(entries) > 0 {
		b.SourceParameters = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.SourceParameters[k] = v
	}
	return b
}

// WithMinNumberOfCopies sets the MinNumberOfCopies field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MinNumberOfCopies field is set to the value of the last call.
func (b *BackingImageSpecApplyConfiguration) WithMinNumberOfCopies(value int) *BackingImageSpecApplyConfiguration {
	b.MinNumberOfCopies = &value
	return b
}

// WithDiskSelector adds the given value to the DiskSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DiskSelector field.
func (b *BackingImageSpecApplyConfiguration) WithDiskSelector(values ...string) *BackingImageSpecApplyConfiguration {
	for i := range values {
		b.DiskSelector = append(b.DiskSelector, values[i])
	}
	return b
}

// WithNodeSelector adds the given value to the NodeSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NodeSelector field.
func (b *BackingImageSpecApplyConfiguration) WithNodeSelector(values ...string) *BackingImageSpecApplyConfiguration {
	for i := range values {
		b.NodeSelector = append(b.NodeSelector, values[i])
	}
	return b
}

// WithSecret sets the Secret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Secret field is set to the value of the last call.
func (b *BackingImageSpecApplyConfiguration) WithSecret(value string) *BackingImageSpecApplyConfiguration {
	b.Secret = &value
	return b
}

// WithSecretNamespace sets the SecretNamespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecretNamespace field is set to the value of the last call.
func (b *BackingImageSpecApplyConfiguration) WithSecretNamespace(value string) *BackingImageSpecApplyConfiguration {
	b.SecretNamespace = &value
	return b
}

// WithDataEngine sets the DataEngine field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DataEngine field is set to the value of the last call.
func (b *BackingImageSpecApplyConfiguration) WithDataEngine(value longhornv1beta2.DataEngineType) *BackingImageSpecApplyConfiguration {
	b.DataEngine = &value
	return b
}
