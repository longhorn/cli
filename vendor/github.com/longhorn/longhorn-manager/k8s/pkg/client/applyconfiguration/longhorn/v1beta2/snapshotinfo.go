/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

// SnapshotInfoApplyConfiguration represents a declarative configuration of the SnapshotInfo type for use
// with apply.
type SnapshotInfoApplyConfiguration struct {
	Name        *string           `json:"name,omitempty"`
	Parent      *string           `json:"parent,omitempty"`
	Children    map[string]bool   `json:"children,omitempty"`
	Removed     *bool             `json:"removed,omitempty"`
	UserCreated *bool             `json:"usercreated,omitempty"`
	Created     *string           `json:"created,omitempty"`
	Size        *string           `json:"size,omitempty"`
	Labels      map[string]string `json:"labels,omitempty"`
}

// SnapshotInfoApplyConfiguration constructs a declarative configuration of the SnapshotInfo type for use with
// apply.
func SnapshotInfo() *SnapshotInfoApplyConfiguration {
	return &SnapshotInfoApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *SnapshotInfoApplyConfiguration) WithName(value string) *SnapshotInfoApplyConfiguration {
	b.Name = &value
	return b
}

// WithParent sets the Parent field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Parent field is set to the value of the last call.
func (b *SnapshotInfoApplyConfiguration) WithParent(value string) *SnapshotInfoApplyConfiguration {
	b.Parent = &value
	return b
}

// WithChildren puts the entries into the Children field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Children field,
// overwriting an existing map entries in Children field with the same key.
func (b *SnapshotInfoApplyConfiguration) WithChildren(entries map[string]bool) *SnapshotInfoApplyConfiguration {
	if b.Children == nil && len(entries) > 0 {
		b.Children = make(map[string]bool, len(entries))
	}
	for k, v := range entries {
		b.Children[k] = v
	}
	return b
}

// WithRemoved sets the Removed field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Removed field is set to the value of the last call.
func (b *SnapshotInfoApplyConfiguration) WithRemoved(value bool) *SnapshotInfoApplyConfiguration {
	b.Removed = &value
	return b
}

// WithUserCreated sets the UserCreated field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UserCreated field is set to the value of the last call.
func (b *SnapshotInfoApplyConfiguration) WithUserCreated(value bool) *SnapshotInfoApplyConfiguration {
	b.UserCreated = &value
	return b
}

// WithCreated sets the Created field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Created field is set to the value of the last call.
func (b *SnapshotInfoApplyConfiguration) WithCreated(value string) *SnapshotInfoApplyConfiguration {
	b.Created = &value
	return b
}

// WithSize sets the Size field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Size field is set to the value of the last call.
func (b *SnapshotInfoApplyConfiguration) WithSize(value string) *SnapshotInfoApplyConfiguration {
	b.Size = &value
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *SnapshotInfoApplyConfiguration) WithLabels(entries map[string]string) *SnapshotInfoApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}
