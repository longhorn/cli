/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

import (
	longhornv1beta2 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta2"
)

// NodeStatusApplyConfiguration represents a declarative configuration of the NodeStatus type for use
// with apply.
type NodeStatusApplyConfiguration struct {
	Conditions          []ConditionApplyConfiguration          `json:"conditions,omitempty"`
	DiskStatus          map[string]*longhornv1beta2.DiskStatus `json:"diskStatus,omitempty"`
	Region              *string                                `json:"region,omitempty"`
	Zone                *string                                `json:"zone,omitempty"`
	SnapshotCheckStatus *SnapshotCheckStatusApplyConfiguration `json:"snapshotCheckStatus,omitempty"`
	AutoEvicting        *bool                                  `json:"autoEvicting,omitempty"`
}

// NodeStatusApplyConfiguration constructs a declarative configuration of the NodeStatus type for use with
// apply.
func NodeStatus() *NodeStatusApplyConfiguration {
	return &NodeStatusApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *NodeStatusApplyConfiguration) WithConditions(values ...*ConditionApplyConfiguration) *NodeStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithDiskStatus puts the entries into the DiskStatus field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the DiskStatus field,
// overwriting an existing map entries in DiskStatus field with the same key.
func (b *NodeStatusApplyConfiguration) WithDiskStatus(entries map[string]*longhornv1beta2.DiskStatus) *NodeStatusApplyConfiguration {
	if b.DiskStatus == nil && len(entries) > 0 {
		b.DiskStatus = make(map[string]*longhornv1beta2.DiskStatus, len(entries))
	}
	for k, v := range entries {
		b.DiskStatus[k] = v
	}
	return b
}

// WithRegion sets the Region field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Region field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithRegion(value string) *NodeStatusApplyConfiguration {
	b.Region = &value
	return b
}

// WithZone sets the Zone field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Zone field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithZone(value string) *NodeStatusApplyConfiguration {
	b.Zone = &value
	return b
}

// WithSnapshotCheckStatus sets the SnapshotCheckStatus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SnapshotCheckStatus field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithSnapshotCheckStatus(value *SnapshotCheckStatusApplyConfiguration) *NodeStatusApplyConfiguration {
	b.SnapshotCheckStatus = value
	return b
}

// WithAutoEvicting sets the AutoEvicting field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AutoEvicting field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithAutoEvicting(value bool) *NodeStatusApplyConfiguration {
	b.AutoEvicting = &value
	return b
}
