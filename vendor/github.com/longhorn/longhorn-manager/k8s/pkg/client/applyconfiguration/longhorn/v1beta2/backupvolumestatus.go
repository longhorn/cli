/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// BackupVolumeStatusApplyConfiguration represents a declarative configuration of the BackupVolumeStatus type for use
// with apply.
type BackupVolumeStatusApplyConfiguration struct {
	OwnerID              *string           `json:"ownerID,omitempty"`
	LastModificationTime *v1.Time          `json:"lastModificationTime,omitempty"`
	Size                 *string           `json:"size,omitempty"`
	Labels               map[string]string `json:"labels,omitempty"`
	CreatedAt            *string           `json:"createdAt,omitempty"`
	LastBackupName       *string           `json:"lastBackupName,omitempty"`
	LastBackupAt         *string           `json:"lastBackupAt,omitempty"`
	DataStored           *string           `json:"dataStored,omitempty"`
	Messages             map[string]string `json:"messages,omitempty"`
	BackingImageName     *string           `json:"backingImageName,omitempty"`
	BackingImageChecksum *string           `json:"backingImageChecksum,omitempty"`
	StorageClassName     *string           `json:"storageClassName,omitempty"`
	LastSyncedAt         *v1.Time          `json:"lastSyncedAt,omitempty"`
}

// BackupVolumeStatusApplyConfiguration constructs a declarative configuration of the BackupVolumeStatus type for use with
// apply.
func BackupVolumeStatus() *BackupVolumeStatusApplyConfiguration {
	return &BackupVolumeStatusApplyConfiguration{}
}

// WithOwnerID sets the OwnerID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OwnerID field is set to the value of the last call.
func (b *BackupVolumeStatusApplyConfiguration) WithOwnerID(value string) *BackupVolumeStatusApplyConfiguration {
	b.OwnerID = &value
	return b
}

// WithLastModificationTime sets the LastModificationTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastModificationTime field is set to the value of the last call.
func (b *BackupVolumeStatusApplyConfiguration) WithLastModificationTime(value v1.Time) *BackupVolumeStatusApplyConfiguration {
	b.LastModificationTime = &value
	return b
}

// WithSize sets the Size field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Size field is set to the value of the last call.
func (b *BackupVolumeStatusApplyConfiguration) WithSize(value string) *BackupVolumeStatusApplyConfiguration {
	b.Size = &value
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *BackupVolumeStatusApplyConfiguration) WithLabels(entries map[string]string) *BackupVolumeStatusApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithCreatedAt sets the CreatedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CreatedAt field is set to the value of the last call.
func (b *BackupVolumeStatusApplyConfiguration) WithCreatedAt(value string) *BackupVolumeStatusApplyConfiguration {
	b.CreatedAt = &value
	return b
}

// WithLastBackupName sets the LastBackupName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastBackupName field is set to the value of the last call.
func (b *BackupVolumeStatusApplyConfiguration) WithLastBackupName(value string) *BackupVolumeStatusApplyConfiguration {
	b.LastBackupName = &value
	return b
}

// WithLastBackupAt sets the LastBackupAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastBackupAt field is set to the value of the last call.
func (b *BackupVolumeStatusApplyConfiguration) WithLastBackupAt(value string) *BackupVolumeStatusApplyConfiguration {
	b.LastBackupAt = &value
	return b
}

// WithDataStored sets the DataStored field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DataStored field is set to the value of the last call.
func (b *BackupVolumeStatusApplyConfiguration) WithDataStored(value string) *BackupVolumeStatusApplyConfiguration {
	b.DataStored = &value
	return b
}

// WithMessages puts the entries into the Messages field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Messages field,
// overwriting an existing map entries in Messages field with the same key.
func (b *BackupVolumeStatusApplyConfiguration) WithMessages(entries map[string]string) *BackupVolumeStatusApplyConfiguration {
	if b.Messages == nil && len(entries) > 0 {
		b.Messages = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Messages[k] = v
	}
	return b
}

// WithBackingImageName sets the BackingImageName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackingImageName field is set to the value of the last call.
func (b *BackupVolumeStatusApplyConfiguration) WithBackingImageName(value string) *BackupVolumeStatusApplyConfiguration {
	b.BackingImageName = &value
	return b
}

// WithBackingImageChecksum sets the BackingImageChecksum field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackingImageChecksum field is set to the value of the last call.
func (b *BackupVolumeStatusApplyConfiguration) WithBackingImageChecksum(value string) *BackupVolumeStatusApplyConfiguration {
	b.BackingImageChecksum = &value
	return b
}

// WithStorageClassName sets the StorageClassName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StorageClassName field is set to the value of the last call.
func (b *BackupVolumeStatusApplyConfiguration) WithStorageClassName(value string) *BackupVolumeStatusApplyConfiguration {
	b.StorageClassName = &value
	return b
}

// WithLastSyncedAt sets the LastSyncedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastSyncedAt field is set to the value of the last call.
func (b *BackupVolumeStatusApplyConfiguration) WithLastSyncedAt(value v1.Time) *BackupVolumeStatusApplyConfiguration {
	b.LastSyncedAt = &value
	return b
}
