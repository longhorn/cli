/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

import (
	longhornv1beta2 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta2"
)

// EngineSpecApplyConfiguration represents a declarative configuration of the EngineSpec type for use
// with apply.
type EngineSpecApplyConfiguration struct {
	Frontend                         *longhornv1beta2.VolumeFrontend   `json:"frontend,omitempty"`
	ReplicaAddressMap                map[string]string                 `json:"replicaAddressMap,omitempty"`
	UpgradedReplicaAddressMap        map[string]string                 `json:"upgradedReplicaAddressMap,omitempty"`
	BackupVolume                     *string                           `json:"backupVolume,omitempty"`
	RequestedBackupRestore           *string                           `json:"requestedBackupRestore,omitempty"`
	RequestedDataSource              *longhornv1beta2.VolumeDataSource `json:"requestedDataSource,omitempty"`
	DisableFrontend                  *bool                             `json:"disableFrontend,omitempty"`
	RevisionCounterDisabled          *bool                             `json:"revisionCounterDisabled,omitempty"`
	UnmapMarkSnapChainRemovedEnabled *bool                             `json:"unmapMarkSnapChainRemovedEnabled,omitempty"`
	Active                           *bool                             `json:"active,omitempty"`
	SnapshotMaxCount                 *int                              `json:"snapshotMaxCount,omitempty"`
	SnapshotMaxSize                  *int64                            `json:"snapshotMaxSize,omitempty"`
}

// EngineSpecApplyConfiguration constructs a declarative configuration of the EngineSpec type for use with
// apply.
func EngineSpec() *EngineSpecApplyConfiguration {
	return &EngineSpecApplyConfiguration{}
}

// WithFrontend sets the Frontend field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Frontend field is set to the value of the last call.
func (b *EngineSpecApplyConfiguration) WithFrontend(value longhornv1beta2.VolumeFrontend) *EngineSpecApplyConfiguration {
	b.Frontend = &value
	return b
}

// WithReplicaAddressMap puts the entries into the ReplicaAddressMap field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ReplicaAddressMap field,
// overwriting an existing map entries in ReplicaAddressMap field with the same key.
func (b *EngineSpecApplyConfiguration) WithReplicaAddressMap(entries map[string]string) *EngineSpecApplyConfiguration {
	if b.ReplicaAddressMap == nil && len(entries) > 0 {
		b.ReplicaAddressMap = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.ReplicaAddressMap[k] = v
	}
	return b
}

// WithUpgradedReplicaAddressMap puts the entries into the UpgradedReplicaAddressMap field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the UpgradedReplicaAddressMap field,
// overwriting an existing map entries in UpgradedReplicaAddressMap field with the same key.
func (b *EngineSpecApplyConfiguration) WithUpgradedReplicaAddressMap(entries map[string]string) *EngineSpecApplyConfiguration {
	if b.UpgradedReplicaAddressMap == nil && len(entries) > 0 {
		b.UpgradedReplicaAddressMap = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.UpgradedReplicaAddressMap[k] = v
	}
	return b
}

// WithBackupVolume sets the BackupVolume field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackupVolume field is set to the value of the last call.
func (b *EngineSpecApplyConfiguration) WithBackupVolume(value string) *EngineSpecApplyConfiguration {
	b.BackupVolume = &value
	return b
}

// WithRequestedBackupRestore sets the RequestedBackupRestore field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RequestedBackupRestore field is set to the value of the last call.
func (b *EngineSpecApplyConfiguration) WithRequestedBackupRestore(value string) *EngineSpecApplyConfiguration {
	b.RequestedBackupRestore = &value
	return b
}

// WithRequestedDataSource sets the RequestedDataSource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RequestedDataSource field is set to the value of the last call.
func (b *EngineSpecApplyConfiguration) WithRequestedDataSource(value longhornv1beta2.VolumeDataSource) *EngineSpecApplyConfiguration {
	b.RequestedDataSource = &value
	return b
}

// WithDisableFrontend sets the DisableFrontend field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DisableFrontend field is set to the value of the last call.
func (b *EngineSpecApplyConfiguration) WithDisableFrontend(value bool) *EngineSpecApplyConfiguration {
	b.DisableFrontend = &value
	return b
}

// WithRevisionCounterDisabled sets the RevisionCounterDisabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RevisionCounterDisabled field is set to the value of the last call.
func (b *EngineSpecApplyConfiguration) WithRevisionCounterDisabled(value bool) *EngineSpecApplyConfiguration {
	b.RevisionCounterDisabled = &value
	return b
}

// WithUnmapMarkSnapChainRemovedEnabled sets the UnmapMarkSnapChainRemovedEnabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UnmapMarkSnapChainRemovedEnabled field is set to the value of the last call.
func (b *EngineSpecApplyConfiguration) WithUnmapMarkSnapChainRemovedEnabled(value bool) *EngineSpecApplyConfiguration {
	b.UnmapMarkSnapChainRemovedEnabled = &value
	return b
}

// WithActive sets the Active field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Active field is set to the value of the last call.
func (b *EngineSpecApplyConfiguration) WithActive(value bool) *EngineSpecApplyConfiguration {
	b.Active = &value
	return b
}

// WithSnapshotMaxCount sets the SnapshotMaxCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SnapshotMaxCount field is set to the value of the last call.
func (b *EngineSpecApplyConfiguration) WithSnapshotMaxCount(value int) *EngineSpecApplyConfiguration {
	b.SnapshotMaxCount = &value
	return b
}

// WithSnapshotMaxSize sets the SnapshotMaxSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SnapshotMaxSize field is set to the value of the last call.
func (b *EngineSpecApplyConfiguration) WithSnapshotMaxSize(value int64) *EngineSpecApplyConfiguration {
	b.SnapshotMaxSize = &value
	return b
}
