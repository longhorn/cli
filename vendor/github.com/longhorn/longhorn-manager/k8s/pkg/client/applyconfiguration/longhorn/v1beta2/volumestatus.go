/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

import (
	longhornv1beta2 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta2"
)

// VolumeStatusApplyConfiguration represents a declarative configuration of the VolumeStatus type for use
// with apply.
type VolumeStatusApplyConfiguration struct {
	OwnerID                *string                              `json:"ownerID,omitempty"`
	State                  *longhornv1beta2.VolumeState         `json:"state,omitempty"`
	Robustness             *longhornv1beta2.VolumeRobustness    `json:"robustness,omitempty"`
	CurrentNodeID          *string                              `json:"currentNodeID,omitempty"`
	CurrentImage           *string                              `json:"currentImage,omitempty"`
	KubernetesStatus       *KubernetesStatusApplyConfiguration  `json:"kubernetesStatus,omitempty"`
	Conditions             []ConditionApplyConfiguration        `json:"conditions,omitempty"`
	LastBackup             *string                              `json:"lastBackup,omitempty"`
	LastBackupAt           *string                              `json:"lastBackupAt,omitempty"`
	PendingNodeID          *string                              `json:"pendingNodeID,omitempty"`
	CurrentMigrationNodeID *string                              `json:"currentMigrationNodeID,omitempty"`
	FrontendDisabled       *bool                                `json:"frontendDisabled,omitempty"`
	RestoreRequired        *bool                                `json:"restoreRequired,omitempty"`
	RestoreInitiated       *bool                                `json:"restoreInitiated,omitempty"`
	CloneStatus            *VolumeCloneStatusApplyConfiguration `json:"cloneStatus,omitempty"`
	RemountRequestedAt     *string                              `json:"remountRequestedAt,omitempty"`
	ExpansionRequired      *bool                                `json:"expansionRequired,omitempty"`
	IsStandby              *bool                                `json:"isStandby,omitempty"`
	ActualSize             *int64                               `json:"actualSize,omitempty"`
	LastDegradedAt         *string                              `json:"lastDegradedAt,omitempty"`
	ShareEndpoint          *string                              `json:"shareEndpoint,omitempty"`
	ShareState             *longhornv1beta2.ShareManagerState   `json:"shareState,omitempty"`
}

// VolumeStatusApplyConfiguration constructs a declarative configuration of the VolumeStatus type for use with
// apply.
func VolumeStatus() *VolumeStatusApplyConfiguration {
	return &VolumeStatusApplyConfiguration{}
}

// WithOwnerID sets the OwnerID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OwnerID field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithOwnerID(value string) *VolumeStatusApplyConfiguration {
	b.OwnerID = &value
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithState(value longhornv1beta2.VolumeState) *VolumeStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithRobustness sets the Robustness field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Robustness field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithRobustness(value longhornv1beta2.VolumeRobustness) *VolumeStatusApplyConfiguration {
	b.Robustness = &value
	return b
}

// WithCurrentNodeID sets the CurrentNodeID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CurrentNodeID field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithCurrentNodeID(value string) *VolumeStatusApplyConfiguration {
	b.CurrentNodeID = &value
	return b
}

// WithCurrentImage sets the CurrentImage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CurrentImage field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithCurrentImage(value string) *VolumeStatusApplyConfiguration {
	b.CurrentImage = &value
	return b
}

// WithKubernetesStatus sets the KubernetesStatus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the KubernetesStatus field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithKubernetesStatus(value *KubernetesStatusApplyConfiguration) *VolumeStatusApplyConfiguration {
	b.KubernetesStatus = value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *VolumeStatusApplyConfiguration) WithConditions(values ...*ConditionApplyConfiguration) *VolumeStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithLastBackup sets the LastBackup field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastBackup field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithLastBackup(value string) *VolumeStatusApplyConfiguration {
	b.LastBackup = &value
	return b
}

// WithLastBackupAt sets the LastBackupAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastBackupAt field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithLastBackupAt(value string) *VolumeStatusApplyConfiguration {
	b.LastBackupAt = &value
	return b
}

// WithPendingNodeID sets the PendingNodeID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PendingNodeID field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithPendingNodeID(value string) *VolumeStatusApplyConfiguration {
	b.PendingNodeID = &value
	return b
}

// WithCurrentMigrationNodeID sets the CurrentMigrationNodeID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CurrentMigrationNodeID field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithCurrentMigrationNodeID(value string) *VolumeStatusApplyConfiguration {
	b.CurrentMigrationNodeID = &value
	return b
}

// WithFrontendDisabled sets the FrontendDisabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FrontendDisabled field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithFrontendDisabled(value bool) *VolumeStatusApplyConfiguration {
	b.FrontendDisabled = &value
	return b
}

// WithRestoreRequired sets the RestoreRequired field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RestoreRequired field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithRestoreRequired(value bool) *VolumeStatusApplyConfiguration {
	b.RestoreRequired = &value
	return b
}

// WithRestoreInitiated sets the RestoreInitiated field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RestoreInitiated field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithRestoreInitiated(value bool) *VolumeStatusApplyConfiguration {
	b.RestoreInitiated = &value
	return b
}

// WithCloneStatus sets the CloneStatus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloneStatus field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithCloneStatus(value *VolumeCloneStatusApplyConfiguration) *VolumeStatusApplyConfiguration {
	b.CloneStatus = value
	return b
}

// WithRemountRequestedAt sets the RemountRequestedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RemountRequestedAt field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithRemountRequestedAt(value string) *VolumeStatusApplyConfiguration {
	b.RemountRequestedAt = &value
	return b
}

// WithExpansionRequired sets the ExpansionRequired field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExpansionRequired field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithExpansionRequired(value bool) *VolumeStatusApplyConfiguration {
	b.ExpansionRequired = &value
	return b
}

// WithIsStandby sets the IsStandby field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IsStandby field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithIsStandby(value bool) *VolumeStatusApplyConfiguration {
	b.IsStandby = &value
	return b
}

// WithActualSize sets the ActualSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ActualSize field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithActualSize(value int64) *VolumeStatusApplyConfiguration {
	b.ActualSize = &value
	return b
}

// WithLastDegradedAt sets the LastDegradedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastDegradedAt field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithLastDegradedAt(value string) *VolumeStatusApplyConfiguration {
	b.LastDegradedAt = &value
	return b
}

// WithShareEndpoint sets the ShareEndpoint field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ShareEndpoint field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithShareEndpoint(value string) *VolumeStatusApplyConfiguration {
	b.ShareEndpoint = &value
	return b
}

// WithShareState sets the ShareState field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ShareState field is set to the value of the last call.
func (b *VolumeStatusApplyConfiguration) WithShareState(value longhornv1beta2.ShareManagerState) *VolumeStatusApplyConfiguration {
	b.ShareState = &value
	return b
}
